#+SETUPFILE: setup.org
#+TITLE: Loan Calculator in JavaScript
#+AUTHOR: Peter Moresi
#+DATE: <2014-09-26 Fri>
#+OPTIONS: ^:nil

#+HTML: <a href="https://github.com/petermoresi/loan-calculator-js"><img style="position: absolute; top: 0; right: 0; border: 0;" src="https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png"></a>

* Overview
** What is this?

  A small JavaScript library with two functions:

  #+NAME: functions
  |------------------+-----------------------------------------------------------|
  | function name    | purpose                                                   |
  |------------------+-----------------------------------------------------------|
  | pmt              | Calculate amortized payment                               |
  | compute-schedule | Computes amortization schedule as multi-dimensional array |
  |------------------+-----------------------------------------------------------|
** About this work
  This is the generated documentation for a [[./amortize.js][literate program]] authored in [[http://www.org-mode.org][org-mode]].

  The generate documentation using [[https://github.com/fniessen/org-html-themes][org-html-themes]] for improved layout.
* Compute Payment
** Overview
  The function to compute payment amount is named 'pmt'.
  
  The function accepts arguments:

  #+NAME: pmt-args
  |------+-----------------------------------------------------------------------------------------------------------------------|
  | name | comments                                                                                                              |
  |------+-----------------------------------------------------------------------------------------------------------------------|
  | rate | is the interest rate for the loan.                                                                                    |
  | nper | is the total number of payments for the loan.                                                                         |
  | pv   | is the present value, or the total amount that a series of future payments is worth now; also known as the principal. |
  |------+-----------------------------------------------------------------------------------------------------------------------|

** Source Code 							   
   1. The function signature:
      #+NAME: define-pmt
      #+BEGIN_SRC js 
        pmt(rate,nper,pv)
      #+END_SRC
   2. In order to calculate the payment we need to first calculate the Present Value Interest Factor (PVIF).o
      #+NAME: calculate-pvif
      #+BEGIN_SRC js
         pvif = Math.pow( 1 + rate, nper);
      #+END_SRC
   3. Using the PVIF we can calculate the payment.
      #+NAME: calculate-pmt
      #+BEGIN_SRC js
        pmt = rate / (pvif - 1) * -(pv * pvif);
      #+END_SRC
   4. Finally, the sections are combined into a function.
      #+NAME: pmt-function
      #+BEGIN_SRC js :noweb yes
        function <<define-pmt>> {
            var pvif, pmt;

            <<calculate-pvif>>
            <<calculate-pmt>>   

            return pmt;
        };
      #+END_SRC
** Tests							   
*** Should be 297.47

   #+NAME: run-pmt
   #+BEGIN_SRC js :exports results :noweb yes :var interest_rate=4.5 payments_per_year=12 years=3 loan_amount=10000
     <<pmt-function>>
     return pmt(interest_rate/100/payments_per_year, payments_per_year * years, -loan_amount).toFixed(2);
   #+END_SRC

   #+RESULTS: run-pmt
   : 297.47

*** Should be 2245.22

    #+CALL: run-pmt(interest_rate=3.5, payments_per_year=12, years=30, loan_amount=500000)

    #+RESULTS:
    : 2245.22

* Compute Schedule
** Overview
  The function to compute amortization schedule is named 'compute_schedule'.

  The function accepts arguments:
  
  #+NAME: compute-schedule-args
  |-------------------+----------------------------------------------------|
  | name              | comments                                           |
  |-------------------+----------------------------------------------------|
  | loan_amount       | is the amount borrowed to purchase the property.   |
  | interest_rate     | is the percentage used to calculate interest due.  |
  | payments_per_year | is the number of payments made in a calendar year. |
  | years             | is the number of years.                            |
  | payment           | is the amount of the payment each period.          |
  |-------------------+----------------------------------------------------|
** JavaScript							   
   1. The function signature is:
      #+NAME: define-compute-schedule
      #+BEGIN_SRC js
        compute_schedule(loan_amount, interest_rate, payments_per_year, years, payment)
      #+END_SRC
   2. Define an array to capture the schedule.
      #+NAME: define-schedule-array
      #+BEGIN_SRC js
        var schedule = [];
      #+END_SRC
   3. Define a variable to track the remaining balance.
      #+NAME: define-remaining-balance
      #+BEGIN_SRC js
        var remaining = loan_amount;
      #+END_SRC
   4. Compute the total number of payments.
      #+NAME: compute-number-of-payments
      #+BEGIN_SRC js
        var number_of_payments = payments_per_year * years;
      #+END_SRC
   5. Loop through all of the periods and capture the entries in the schedule.
      #+NAME: loop-schedule
      #+BEGIN_SRC js
        for (var i=0; i<=number_of_payments; i++) {
            var interest = remaining * (interest_rate/100/payments_per_year);
            var principle = (payment-interest);
            var row = [i, principle.toFixed(2), interest.toFixed(2), remaining.toFixed(2)];
            schedule.push(row);
            remaining -= principle
        }
      #+END_SRC
   6. Finally, the sections are combined into a function.
      #+NAME: compute-schedule-function
      #+BEGIN_SRC js :noweb yes
        function <<define-compute-schedule>> {
            <<define-schedule-array>>
            <<define-remaining-balance>>
            <<compute-number-of-payments>>

            <<loop-schedule>>

            return schedule;
        }
      #+END_SRC
** Test								   
   #+NAME: run-compute-schedule
   #+BEGIN_SRC js :exports results :results output :noweb yes :var loan_amount=10000 interest_rate=4.5 payments_per_year=12 years=3 payment=297.47
     <<compute-schedule-function>>

     console.log('loan_amount: ' + loan_amount);
     console.log('interest_rate: ' + interest_rate);
     console.log('payments_per_year: ' + payments_per_year);
     console.log('years: ' + years);
     console.log('payment: ' + payment);
     console.log( JSON.stringify(
         compute_schedule(loan_amount, interest_rate, payments_per_year, years, payment), 0, 4
     ))
   #+END_SRC

   #+RESULTS: run-compute-schedule
   : loan_amount: 10000
   : interest_rate: 4.5
   : payments_per_year: 12
   : years: 3
   : payment: 297.47
   : [[0,"259.97","37.50","10000.00"],[1,"260.94","36.53","9740.03"],[2,"261.92","35.55","9479.09"],[3,"262.91","34.56","9217.16"],[4,"263.89","33.58","8954.26"],[5,"264.88","32.59","8690.36"],[6,"265.87","31.60","8425.48"],[7,"266.87","30.60","8159.61"],[8,"267.87","29.60","7892.74"],[9,"268.88","28.59","7624.87"],[10,"269.89","27.58","7355.99"],[11,"270.90","26.57","7086.10"],[12,"271.91","25.56","6815.21"],[13,"272.93","24.54","6543.29"],[14,"273.96","23.51","6270.36"],[15,"274.98","22.49","5996.40"],[16,"276.01","21.46","5721.42"],[17,"277.05","20.42","5445.41"],[18,"278.09","19.38","5168.36"],[19,"279.13","18.34","4890.27"],[20,"280.18","17.29","4611.14"],[21,"281.23","16.24","4330.96"],[22,"282.28","15.19","4049.73"],[23,"283.34","14.13","3767.45"],[24,"284.40","13.07","3484.10"],[25,"285.47","12.00","3199.70"],[26,"286.54","10.93","2914.23"],[27,"287.62","9.85","2627.69"],[28,"288.69","8.78","2340.07"],[29,"289.78","7.69","2051.38"],[30,"290.86","6.61","1761.60"],[31,"291.95","5.52","1470.73"],[32,"293.05","4.42","1178.78"],[33,"294.15","3.32","885.73"],[34,"295.25","2.22","591.58"],[35,"296.36","1.11","296.33"],[36,"297.47","-0.00","-0.03"]]

* Amortize.js
   24 sweet lines of source code.
#+NAME: amortize-js   
#+BEGIN_SRC js :exports code :noweb yes :tangle amortize.js
    <<pmt-function>>

    <<compute-schedule-function>>
#+END_SRC
* Demo
  The [[./loan-calculator.html][demo page]] shows a working example of using these functions. 
 
 The page uses jquery, twitter bootstrap and datatables.net.

*** HTML							   :noexport:
#+BEGIN_SRC html :tangle loan-calculator.html :noweb yes
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <title>Amortization Schedule Test Page</title>

      <!-- Bootstrap -->
      <link href="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet">

      <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
      <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
      <!--[if lt IE 9]>
          <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.t.js"></script>
          <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
          <![endif]-->
    </head>
    <body>
      <h1>Amortization Schedule</h1>

      <div id="user-input" class="row">
        <div class="col-sm-6 ">
          Loan Amount
        </div>
        <div class="col-sm-6">
          <input type="text" id="loan_amount" class="user-input" value="50000" />
        </div>
       <div class="col-sm-6">
          Interest Rate
        </div>
        <div class="col-sm-6">
          <input type="text" id="interest_rate" class="user-input" value="4.5">
        </div>
       <div class="col-sm-6">
          Years
        </div>
        <div class="col-sm-6">
          <input type="text" id="years" class="user-input" value="3" />
        </div> 
       <div class="col-sm-6">
          Payments per year
        </div>
        <div class="col-sm-6">
          <input type="text" id="payments_per_year" class="user-input" value="12" />
        </div>
        <div class="col-sm-6">
          Payment Amount
        </div>
        <div class="col-sm-6">
          <div id="payment_amount"></div>
        </div>
     </div>

      <div id="demo">
      </div>
   
      <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
      <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
      <script src="http://cdn.datatables.net/1.10.2/js/jquery.dataTables.min.js"></script>
      <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>

      <script>
      <<test-page-js>>
      </script>

    </body>
  </html>
#+END_SRC
*** JavaScript							   :noexport:
#+NAME: loan-calculator-js
#+BEGIN_SRC js :noweb yes
  <<amortize-js>>

  function getDataSet() { 
      var loan_amount = parseFloat( $('#loan_amount').val() );
      var interest_rate = parseFloat( $('#interest_rate').val() );
      var payments_per_year = parseInt( $('#payments_per_year').val() );
      var years = parseInt( $('#years').val() );
                                     
      var payment = pmt(interest_rate/100/payments_per_year, payments_per_year * years, -loan_amount);
      
      $('#payment_amount').text('$' + payment.toFixed(2));

      return compute_schedule(loan_amount,
                              interest_rate,
                              payments_per_year,
                              years,
                              payment);
  }

  function reloadTable() {
      $('#demo').empty();
      $('#demo').html( '<table cellpadding="0" cellspacing="0" border="0" class="display table" id="example"></table>' );
      $('#example').dataTable( {
          "data": getDataSet(),
          "columns": [
              { "title": "Period" },
              { "title": "Principle" },
              { "title": "Interest" },
              { "title": "Remaining" }
          ],
          "search": false,
          "paging":   false,
          "ordering": false,
          "info":     false
      } );   
  }

  $(document).ready(function() {
      reloadTable();

      $(document).on('keyup', '.user-input', function(e) {
          reloadTable();
      });
  });
#+END_SRC

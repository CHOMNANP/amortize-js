#+SETUPFILE: setup.org
#+NAME: Amortize.js
#+AUTHOR: Peter Moresi
#+DATE: <2014-09-26 Fri>
#+OPTIONS: ^:nil


* Overview

  Implement JavaScript library with functions:

  #+NAME: functions
  | variable name    | comments                                                  |
  |------------------+-----------------------------------------------------------|
  | pmt              | Calculate amortized payment                               |
  | compute-schedule | Computes amortization schedule as multi-dimensional array |

* Compute Payment
** Overview
  The function to compute payment amount is named 'pmt'.
  
  The function accepts arguments:

  #+NAME: pmt-args
  | name | comments                                                                                                                                                                            |
  |------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
  | rate | is the interest rate for the loan.                                                                                                                                                  |
  | nper | is the total number of payments for the loan.                                                                                                                                       |
  | pv   | is the present value, or the total amount that a series of future payments is worth now; also known as the principal.                                                               |

** Source Code 							   

   The function signature in JavaScript.

   #+NAME: define-pmt
   #+BEGIN_SRC js 
     pmt(rate,nper,pv)
   #+END_SRC

   In order to calculate the payment we need to first calculate the Present Value Interest Factor (PVIF).

   #+NAME: calculate-pvif
   #+BEGIN_SRC js
     pvif = Math.pow( 1 + rate, nper);
   #+END_SRC

   Using the PVIF we can calculate the payment.
   
   #+NAME: calculate-pmt
   #+BEGIN_SRC js
     pmt = rate / (pvif - 1) * -(pv * pvif);
   #+END_SRC

   Finally, the sections are combined into a JavaScript function definition.

   #+NAME: pmt-function
   #+BEGIN_SRC js :noweb yes
     function <<define-pmt>> {
         var pvif, pmt;

         <<calculate-pvif>>
         <<calculate-pmt>>   

         return pmt;
     };
   #+END_SRC

** Tests							   
*** Should be 297.47

   #+NAME: run-pmt
   #+BEGIN_SRC js :exports both :noweb yes :var interest_rate=4.5 payments_per_year=12 years=3 loan_amount=10000
     <<pmt-function>>
     return pmt(interest_rate/100/payments_per_year, payments_per_year * years, -loan_amount).toFixed(2);
   #+END_SRC

   #+RESULTS: run-pmt
   : 297.47

*** Should be 2245.22

    #+CALL: run-pmt(interest_rate=3.5, payments_per_year=12, years=30, loan_amount=500000)

    #+RESULTS:
    : 2245.22

* Compute Schedule
** Overview
  The function to compute amortization schedule is named 'compute_schedule'.

  The function accepts arguments:
  
  #+NAME: compute-schedule-args
  | name              | comments                                           |
  |-------------------+----------------------------------------------------|
  | loan_amount       | is the amount borrowed to purchase the property.   |
  | interest_rate     | is the percentage used to calculate interest due.  |
  | payments_per_year | is the number of payments made in a calendar year. |
  | years             | is the number of years.                            |
  | payment           | is the amount of the payment each period.          |

** JavaScript							   
   
   The function signature is:

   #+NAME: define-compute-schedule
   #+BEGIN_SRC js
     compute_schedule(loan_amount, interest_rate, payments_per_year, years, payment)
   #+END_SRC

   Define an array to capture the schedule.

   #+NAME: define-schedule-array
   #+BEGIN_SRC js
     var schedule = [];
   #+END_SRC

   Define a variable to track the remaining balance.

   #+NAME: define-remaining-balance
   #+BEGIN_SRC js
     var remaining = loan_amount;
   #+END_SRC

   Compute the total number of payments.

   #+NAME: compute-number-of-payments
   #+BEGIN_SRC js
     var number_of_payments = payments_per_year * years;
   #+END_SRC


   Loop through all of the periods and capture the entries in the schedule.

   #+NAME: loop-schedule
   #+BEGIN_SRC js
        for (var i=0; i<=number_of_payments; i++) {
            var interest = remaining * (interest_rate/100/payments_per_year);
            var principle = (payment-interest);
            var row = [i, payment.toFixed(2), principle.toFixed(2), interest.toFixed(2), remaining.toFixed(2)];
            schedule.push(row);
            remaining -= principle
        }
   #+END_SRC

   Finally, define the compute-schedule function.

   #+NAME: compute-schedule-function
   #+BEGIN_SRC js :noweb yes
     function <<define-compute-schedule>> {
         <<define-schedule-array>>
         <<define-remaining-balance>>
         <<compute-number-of-payments>>

         <<loop-schedule>>

         return schedule;
     }
   #+END_SRC

** Test								   
   #+NAME: run-compute-schedule
   #+BEGIN_SRC js :exports code :noweb yes :var loan_amount=10000 interest_rate=4.5 payments_per_year=12 years=3 payment=297.47
     <<compute-schedule-function>>

     return compute_schedule(loan_amount, interest_rate, payments_per_year, years, payment)
   #+END_SRC

   #+RESULTS: run-compute-schedule

* Amortize.js
** Download
   24 sweet lines of source code:  [[file:amortize.js]]

#+NAME: amortize-js   
#+ATTR_HTML: :textarea t :width 80 :rows 24
  #+BEGIN_SRC js :exports code :tangle amortize.js :noweb yes
    <<pmt-function>>
    <<compute-schedule-function>>
  #+END_SRC

** Test Page							   :noexport:
   This page loads 3rd party code from CDN and embedded the JavaScript inline.
*** HTML
#+BEGIN_SRC html :tangle test-page.html :noweb yes
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Amortization Schedule Test Page</title>

    <!-- Bootstrap -->
    <link href="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet">

    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.t.js"></script>
        <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
        <![endif]-->
  </head>
  <body>
    <h1>Amortization Schedule</h1>

    <div id="user-input" class="row">
      <div class="col-sm-6 ">
        Loan Amount
      </div>
      <div class="col-sm-6">
        <input type="text" id="loan_amount" class="user-input" value="50000" />
      </div>
     <div class="col-sm-6">
        Interest Rate
      </div>
      <div class="col-sm-6">
        <input type="text" id="interest_rate" class="user-input" value="4.5">
      </div>
     <div class="col-sm-6">
        Years
      </div>
      <div class="col-sm-6">
        <input type="text" id="years" class="user-input" value="3" />
      </div> 
     <div class="col-sm-6">
        Payments per year
      </div>
      <div class="col-sm-6">
        <input type="text" id="payments_per_year" class="user-input" value="12" />
      </div>
   </div>

    <div id="demo">
    </div>
 
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <script src="http://cdn.datatables.net/1.10.2/js/jquery.dataTables.min.js"></script>
    <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>

    <script>
    <<test-page-js>>
    </script>

  </body>
</html>
#+END_SRC
*** JavaScript
#+NAME: test-page-js
#+BEGIN_SRC js :noweb yes
  <<amortize-js>>

  function getDataSet() { 
      var loan_amount = parseFloat( $('#loan_amount').val() );
      var interest_rate = parseFloat( $('#interest_rate').val() );
      var payments_per_year = parseInt( $('#payments_per_year').val() );
      var years = parseInt( $('#years').val() );
                                     
      var payment = pmt(interest_rate/100/payments_per_year, payments_per_year * years, -loan_amount);
      
      return compute_schedule(loan_amount,
                              interest_rate,
                              payments_per_year,
                              years,
                              payment);
  }

  function reloadTable() {
      $('#demo').empty();
      $('#demo').html( '<table cellpadding="0" cellspacing="0" border="0" class="display table" id="example"></table>' );
      $('#example').dataTable( {
          "data": getDataSet(),
          "columns": [
              { "title": "Period" },
              { "title": "Payment" },
              { "title": "Principle" },
              { "title": "Interest" },
              { "title": "Remaining" }
          ],
          "search": false,
          "paging":   false,
          "ordering": false,
          "info":     false
      } );   
  }

  $(document).ready(function() {
      reloadTable();

      $(document).on('keyup', '.user-input', function(e) {
          reloadTable();
      });
  });
#+END_SRC
* Demo
#+HTML: <iframe src="test-page.html" style="width: 600px; height: 500px; scroll: auto"/>
